# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'D:/d/uitopy/PyconventorV2.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import os
import tkinter as tk
from tkinter import messagebox
from tkinter.filedialog import askopenfilename

from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_PyConventorV2(object):
    def con_file(self):
        file_types = (('Python', '*.py'), ('All', '*.*'))
        py_ch = askopenfilename(title='Open a file', initialdir=os.getcwd(), filetypes=file_types)
        if py_ch:
            self.lineEdit.setText(py_ch)

    def con_start(self):
        py_ch = self.lineEdit.text()
        one_file = "-F" if self.checkBox.isChecked() else ""
        library = self.get_library() if self.checkBox_2.isChecked() else ""
        no_window = "-w" if self.checkBox_3.isChecked() else ""
        icon = self.icon_path() if self.checkBox_4.isChecked() else ""
        cmd = f'pyinstaller "{py_ch}" {one_file} {library} {no_window} {icon}'

        def start_pack():
            try:
                os.system(cmd)
            except:
                os.system("pip install pyinstaller")
                os.system(cmd)
            finally:
                print("工作完成, 在dist目錄下有同一名字的檔案或資料夾\n",
                      "Work completed. There is a file or folder with the same name in the 'dist' directory.")
                messagebox.showinfo('Work', "工作完成, 在dist目錄下有同一名字的檔案或資料夾")
                exit()
                
        start_pack()

    def set_one_file(self):
        one_file = "-F" if self.checkBox.isChecked() else ""
        if self.checkBox.isChecked():
            print("啓動構建時輸出單一EXE檔案\n",
                  "Build using a single archive format")
        else:
            print("啓動構建時輸出正常的檔案佈局\n",
                  "Build without using a single file format")
        return one_file

    def get_library(self):
        file_types = (('requirements', 'requirements.txt'), ('All', '*.*'))
        requirements = askopenfilename(title="Open 'requirements.txt'", initialdir=os.getcwd(), filetypes=file_types)
        with open(requirements, "r", encoding="utf-8") as libarary_text:
            library = [line.strip() for line in libarary_text]
            library = sorted(set(library))
        print(f"Using library: {library}")
        library = "--hidden-import " + ",".join(library)
        return library

    def set_library(self):
        if self.checkBox_2.isChecked():
            print("開始使用轉換器時會向你索取requirments.txt檔案\n",
                  "Get 'requirments.txt' when you convent")
        else:
            print("啓動時不索取requirments.txt檔案\n",
                  "Get 'requirments.txt' setting has reset")
            
    def set_no_window(self):
        no_window = "-w" if self.checkBox_3.isChecked() else ""
        return no_window
    
    def icon_path(self):
        icon = askopenfilename(title="Open Icon file", initialdir=os.getcwd(), filetypes=(("Icon file", "*.ico"), ("All file", "*.*")))
        icon = "-i " + icon
        return icon
    
    def icon_setting(self):
        if self.checkBox_4.isChecked():
            print("啟動時將請求ICON檔案\n",
                  "ICON file get when you going to convent .ui file")
        else:
            print("啟動時不請求ICON檔案\n",
                  "ICON will not get when you convent file")
    
    def cmd_setting(self):
        if self.checkBox_3.isChecked():
            print("運行時不開啓CMD視窗\n",
                  "CMD window will not open")
        else:
            print("運行時開啓CMD視窗\n",
                  "CMD window will open when you open the convent software")

    def setupUi(self, PyConventorV2):
        PyConventorV2.setObjectName("PyConventorV2")
        PyConventorV2.resize(455, 319)

        self.centralwidget = QtWidgets.QWidget(PyConventorV2)
        self.centralwidget.setObjectName("centralwidget")

        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(110, 60, 211, 20))
        self.lineEdit.setObjectName("lineEdit")

        self.toolButton = QtWidgets.QToolButton(self.centralwidget)
        self.toolButton.setGeometry(QtCore.QRect(320, 60, 37, 21))
        self.toolButton.setObjectName("toolButton")
        self.toolButton.clicked.connect(self.con_file)

        self.checkBox = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox.setGeometry(QtCore.QRect(70, 110, 71, 16))
        self.checkBox.setObjectName("checkBox")
        self.checkBox.stateChanged.connect(self.set_one_file)

        self.checkBox_2 = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox_2.setGeometry(QtCore.QRect(150, 110, 121, 16))
        self.checkBox_2.setObjectName("checkBox_2")
        self.checkBox_2.stateChanged.connect(self.set_library)

        self.checkBox_3 = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox_3.setGeometry(QtCore.QRect(280, 110, 111, 16))
        self.checkBox_3.setObjectName("checkBox_3")
        self.checkBox_3.stateChanged.connect(self.cmd_setting)

        self.checkBox_4 = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox_4.setGeometry(QtCore.QRect(200, 150, 51, 16))
        self.checkBox_4.setObjectName("checkBox_4")
        self.checkBox_4.stateChanged.connect(self.icon_setting)

        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(170, 190, 111, 41))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(self.con_start)

        PyConventorV2.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(PyConventorV2)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 455, 23))
        self.menubar.setObjectName("menubar")
        PyConventorV2.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(PyConventorV2)
        self.statusbar.setObjectName("statusbar")
        PyConventorV2.setStatusBar(self.statusbar)

        self.retranslateUi(PyConventorV2)
        QtCore.QMetaObject.connectSlotsByName(PyConventorV2)

    def retranslateUi(self, PyConventorV2):
        _translate = QtCore.QCoreApplication.translate
        PyConventorV2.setWindowTitle(_translate("PyConventorV2", "PyConventor-V2.0"))
        self.lineEdit.setText(_translate("PyConventorV2", ".\\"))
        self.toolButton.setText(_translate("PyConventorV2", "..."))
        self.checkBox.setText(_translate("PyConventorV2", "OneFile"))
        self.checkBox_2.setText(_translate("PyConventorV2", "requirements.txt"))
        self.checkBox_3.setText(_translate("PyConventorV2", "NoCommandWindow"))
        self.pushButton.setWhatsThis(_translate("PyConventorV2", "<html><head/><body><p align=\"center\"><span style=\" font-size:20pt;\">Convent!!!</span></p></body></html>"))
        self.pushButton.setText(_translate("PyConventorV2", "Convent!!!"))
        self.checkBox_4.setText(_translate("PyConventorV2", "Icon"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    PyConventorV2 = QtWidgets.QMainWindow()
    ui = Ui_PyConventorV2()
    ui.setupUi(PyConventorV2)
    PyConventorV2.show()
    sys.exit(app.exec_())
